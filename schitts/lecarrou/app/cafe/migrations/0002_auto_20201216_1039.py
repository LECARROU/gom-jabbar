# Generated by Django 2.2.5 on 2020-12-16 08:56

from django.db import migrations
from django.utils import timezone
from datetime import datetime, timedelta 
from dateutil.relativedelta import *
from django.conf import settings
from django.apps import apps as configured_apps
from django.contrib.auth.management import create_permissions
from distutils.util import strtobool
from randomuser import RandomUser
import random
import datetime
from faker import Faker
import pytz
from django.db.models import Q
import csv
import requests

# create menus (food and drinks)
# API thecocktaildb.coml
# API api.spoonacular.com
def create_menus(apps, schema_editor):
    # response = requests.get('https://www.thecocktaildb.com/api/json/v1/1/filter.php?c=Cocktail')
    # # transform the response to json objects
    # cocktails = response.json()

    # cocktails = requests.get('https://www.thecocktaildb.com/api/json/v1/1/filter.php?c=Cocktail').json()['drinks'][i]['strDrink']
    # dishes = requests.get('https://api.spoonacular.com/recipes/random?number=10&cuisine=American&type=main course&apiKey=2e9e2e2925e243f484364f78679112fc').json()['recipes'][i]['title']
    Menus = apps.get_model('cafe', 'Menus')
    cocktails = requests.get('https://www.thecocktaildb.com/api/json/v1/1/filter.php?c=Cocktail').json()['drinks'][:10]
    dishes = requests.get('https://api.spoonacular.com/recipes/random?number=10&cuisine=American&type=main course&apiKey=2e9e2e2925e243f484364f78679112fc').json()['recipes'][:10]

    for i in range(10):

        Menus.objects.create(
            item = cocktails[i]['strDrink'],
            price = round(random.uniform(2.00,10.00),2),
            last_order_date = timezone.now(),
            conservation = random.randrange(5,15),
            available = True,
            created_at = timezone.now()
        )
        Menus.objects.create(
            item = dishes[i]['title'],
            price = round(random.uniform(5.00,10.00),2),
            last_order_date = timezone.now(),
            conservation = random.randrange(5,15),
            available = True,
            created_at = timezone.now()
        )

def create_app_users(apps, schema_editor):
    
    User = apps.get_model(*settings.AUTH_USER_MODEL.split('.'))
    Customers = apps.get_model('cafe', 'Customers')

    # user admin
    User.objects.create(
        username = 'admin',
        is_superuser = True,
        is_staff = True,
        email = 'jerome.le-carrou@u-bordeaux.fr',
        password = 'pbkdf2_sha256$150000$qe1v2XJKkik8$jF6iFZ+4GpK1JzBdHzRG0H3XsYY+YphYpxc9Cbgg+7Y=',
        date_joined = timezone.now()
    )
    Customers.objects.create(
        user = User.objects.get(username='admin'),
        customer_type = 1,
        created_at = timezone.now()
    )

    # Twyla waitress's Cafe Tropical
    User.objects.create(
        username = 'twyla',
        first_name = 'Sands',
        last_name ='Twyla',
        email = 'twyla.sands@example.com',
        password = 'pbkdf2_sha256$150000$qQLXtfRCoMiw$w3OHPMWaU+Xd2oihppp5DQbmZdmAx56KbNvJrrJxKj4=',
        date_joined = timezone.now()
    )
    Customers.objects.create(
        user = User.objects.get(username='twyla'),
        customer_type = 2,
        created_at = timezone.now()
    )


# create Rose's familly members
# Rose's familly members: Davis Rose, Alexis Rose, Moira Rose
def create_customers(apps, schema_editor):
    
    User = apps.get_model(*settings.AUTH_USER_MODEL.split('.'))
    Customers = apps.get_model('cafe', 'Customers')


    User.objects.create(
        username = 'david.rose',
        first_name = 'Rose',
        last_name ='David',
        email = 'david.rose@example.com',
        password = 'pbkdf2_sha256$150000$qQLXtfRCoMiw$w3OHPMWaU+Xd2oihppp5DQbmZdmAx56KbNvJrrJxKj4=',
        date_joined = timezone.now()
    )
    Customers.objects.create(
        user = User.objects.get(username='david.rose'),
        customer_type = 3,
        drink_preferences = 1,
        food_preferences = 1,
    )

    User.objects.create(
        username = 'alexis.rose',
        first_name = 'Rose',
        last_name ='Alexis',
        email = 'alexis.rose@example.com',
        password = 'pbkdf2_sha256$150000$qQLXtfRCoMiw$w3OHPMWaU+Xd2oihppp5DQbmZdmAx56KbNvJrrJxKj4=',
        date_joined = timezone.now()
    )
    Customers.objects.create(
        user = User.objects.get(username='alexis.rose'),
        customer_type = 3,
        drink_preferences = 1,
        food_preferences = 2,
    )

    User.objects.create(
        username = 'moira.rose',
        first_name = 'Rose',
        last_name ='Moira',
        email = 'moira.rose@example.com',
        password = 'pbkdf2_sha256$150000$qQLXtfRCoMiw$w3OHPMWaU+Xd2oihppp5DQbmZdmAx56KbNvJrrJxKj4=',
        date_joined = timezone.now()
    )
    Customers.objects.create(
        user = User.objects.get(username='moira.rose'),
        customer_type = 3,
        drink_preferences = 2,
        food_preferences = 1,
    )
    

# create orders associated to customers
def create_orders(apps, schema_editor):
    
    User = apps.get_model(*settings.AUTH_USER_MODEL.split('.'))
    Orders = apps.get_model('cafe', 'Orders')
    Menus = apps.get_model('cafe', 'Menus')
    Tables = apps.get_model('cafe', 'Tables')
    Customers = apps.get_model('cafe', 'Customers')
    Customers_Orders_Comments = apps.get_model('cafe', 'Customers_Orders_Comments')
    Orders_Menus = apps.get_model('cafe', 'Orders_Menus')

    users = [user.id for user in User.objects.filter(~Q(username='admin') & ~Q(username='twyla'))]
    menus = [menu.menu_id for menu in Menus.objects.all()]
    tables = [table for table in Tables.objects.all()]

    # fake random date using faker
    fake = Faker()
    
    # start_date_year1 = timezone.now()+relativedelta(years=-2)
    # end_date_year1= timezone.now()+relativedelta(years=-1,days=-1)
    # start_date_year2 = timezone.now()+relativedelta(years=-1)
    # end_date_year2 = timezone.now()
    start_date_year1 = datetime.datetime(2019,1,1) 
    end_date_year1 = datetime.datetime(2019,12,31) 
    start_date_year2 = datetime.datetime(2020,1,1) 
    end_date_year2 = datetime.datetime(2020,12,31) 

    individuals_orders_year1 = []
    individuals_orders_year2 = []
    total_orders_year1 = 0
    total_orders_year2 = 0

    customers = Customers.objects.filter(~Q(user_id = User.objects.get(username='twyla').id) & ~Q(user_id = User.objects.get(username='admin').id))
    for customer in customers:
        n1 = random.randrange(2,14)
        n2 = random.randrange(2,14)
        individuals_orders_year1.append((customer.customer_id,n1))
        individuals_orders_year2.append((customer.customer_id,n2))
        total_orders_year1 += n1
        total_orders_year2 += n2

    # STEP 2    
    # loop over the range of total_orders to create Orders
    for order in range(total_orders_year1):
        o = Orders.objects.create(
            table = random.sample(tables,k=1)[0],
            customers = random.randrange(1,6),
            split_bill = random.randrange(1,3),
            delivered = True,
            paid = True,
        )
        o.created_at = fake.date_time_between_dates(datetime_start=start_date_year1, datetime_end=end_date_year1, tzinfo=pytz.utc)
        o.save()

    for order in range(total_orders_year2):
        o = Orders.objects.create(
            table = random.sample(tables,k=1)[0],
            customers = random.randrange(1,6),
            split_bill = random.randrange(1,3),
            delivered = True,
            paid = True,
        )
        o.created_at = fake.date_time_between_dates(datetime_start=start_date_year2, datetime_end=end_date_year2, tzinfo=pytz.utc)
        o.save()


    # STEP 3
    # 'link' Customers to Orders (model Customers_Orders_Comments)

    orders_year1 = list(range(1,total_orders_year1+1))
    for customer in individuals_orders_year1:

        for i in range(customer[1]):
            order_id = random.sample(orders_year1,k=1)[0] # selection d'une commande dans la liste des commandes
            orders_year1.remove(order_id) # suppression de la commande attribuée précédemment
            customer_id = customer[0] 
            Customers_Orders_Comments.objects.create(
                order_id = order_id,
                customer_id = customer_id
            )

    orders_year2 = list(range(total_orders_year1+1,total_orders_year1+total_orders_year2+1))
    for customer in individuals_orders_year2:

        for i in range(customer[1]):
            order_id = random.sample(orders_year2,k=1)[0] # selection d'une commande dans la liste des commandes
            orders_year2.remove(order_id) # suppression de la commande attribuée précédemment
            customer_id = customer[0] 
            Customers_Orders_Comments.objects.create(
                order_id = order_id,
                customer_id = customer_id
            )

    # STEP 4
    # 'link' Menus items to Orders (model Orders_Menus)
    # only one menus item per customer even if it should more (drink, main course, dessert, etc...)
    for order in Orders.objects.all():
        for i in range(order.customers): # an order menus should be created for each customers related to this order
            Orders_Menus.objects.create(
                order_id = order.order_id,
                menu_id = random.sample(menus,k=1)[0],
                tone = random.randrange(1,7),
                cooking = random.randrange(1,10)
            )

# # https://dummyapi.io/account (j.lecarrou@gmail.com)
# # API user with post and comments
# # via postman : 
# # Headers: app-id 60016315253f3585ce4251a7
# # url list of posts: https://dummyapi.io/data/api/post/ (with id - e.g. VGyIwGVWeeurHv5bSZgx)
# # url comment for a given post: https://dummyapi.io/data/api/post/{postId}/comment
# def get_id_comments():
#     id = []
#     url = 'https://dummyapi.io/data/api/post/'
#     headers = {'app-id': '60016315253f3585ce4251a7'}     
#     response = requests.get(url, headers=headers)
#     data = response.json()
#     for i in data['data']:
#         # print(i['id']) # return all id 
#         id.append(i['id'])
#     return id

# def create_comments(apps, schema_editor):
#     User = apps.get_model(*settings.AUTH_USER_MODEL.split('.'))
#     Comments = apps.get_model('cafe', 'Comments')
#     ids = get_id_comments()

#     headers = {'app-id': '60016315253f3585ce4251a7'}     

#     for i in range(0,len(ids)):
#         url = 'https://dummyapi.io/data/api/post/'+ids[i]+'/comment'
#         response = requests.get(url, headers=headers)
#         data = response.json()
#         if data['data']:                                  
#             # print(data['data'][0]['message'])
#             Comments.objects.create(
#                 title = 'Wonderfull place!',
#                 comment = data['data'][0]['message'],
#                 rate = random.randrange(1,3), #defined number of colored stars
#                 like = random.randrange(1,100),
#                 dislike = random.randrange(1,100),
#                 created_at = timezone.now()
#             )


class Migration(migrations.Migration):

    dependencies = [
        ('cafe', '0001_initial'),
    ]

    operations = [
        migrations.RunSQL(
            sql = [
                'INSERT INTO "Tables" (number,available,created_at) VALUES (6,True,Now());',
                'INSERT INTO "Tables" (number,available,created_at) VALUES (4,True,Now());',
                'INSERT INTO "Tables" (number,available,created_at) VALUES (4,True,Now());',
                'INSERT INTO "Tables" (number,available,created_at) VALUES (2,True,Now());',
            ]
        ),
        migrations.RunPython(create_app_users),
        migrations.RunPython(create_customers),
        migrations.RunPython(create_menus),
        migrations.RunPython(create_orders),
        # migrations.RunPython(create_comments),
    ]


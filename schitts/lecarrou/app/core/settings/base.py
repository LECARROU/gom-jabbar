"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 3.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import os
from django.utils.translation import ugettext_lazy as _
from pathlib import Path
from celery.schedules import crontab
from django.utils import timezone

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', default='*5_@zp+oc@hacd2bpv+@+a(upu-qige=lsn=o=h4^jcpgs&rri')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = int(os.environ.get("DEBUG", default=0))

ALLOWED_HOSTS = os.environ.get("DJANGO_ALLOWED_HOSTS",default='localhost').split(" ")


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.sites',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'crispy_forms',
    'widget_tweaks',
    'bootstrap4',
    'corsheaders',
    'registration.apps.RegistrationConfig',
    'parameters.apps.ParametersConfig',

    'django_celery_beat',
    'dbbackup',
    'django_extensions',
    'debug_toolbar',
    'partial_date',
    'safedelete',
    'simple_history',
    # 'maintenance_mode',
    'rest_framework',
    'rest_framework.authtoken',
    'api',
    'cafe',
]

CRISPY_TEMPLATE_PACK = 'bootstrap4'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'core.middleware.initialisation',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    
    'debug_toolbar.middleware.DebugToolbarMiddleware',

    'simple_history.middleware.HistoryRequestMiddleware',
    # 'maintenance_mode.middleware.MaintenanceModeMiddleware',
    
]

CORS_ORIGIN_ALLOW_ALL = False
CORS_ORIGIN_WHITELIST = (
    'http://localhost:8000',
)

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR,'cafe/templates'),
            os.path.join(BASE_DIR,'registration/templates'),
            os.path.join(BASE_DIR,'templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'core.context_processors.data_context_processor',
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # 'maintenance_mode.context_processors.maintenance_mode',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        "ENGINE": os.environ.get("SQL_ENGINE", "django.db.backends.sqlite3"),
        "NAME": os.environ.get("SQL_DATABASE", os.path.join(BASE_DIR, 'db.sqlite3')),
        "USER": os.environ.get("SQL_USER", "user"),
        "PASSWORD": os.environ.get("SQL_PASSWORD", "password"),
        "HOST": os.environ.get("SQL_HOST", "localhost"),
        "PORT": os.environ.get("SQL_PORT", "5432"),
        'TEST' : {
            'NAME': 'test_cafetropical',
        }
    }
}

DBBACKUP_STORAGE = 'django.core.files.storage.FileSystemStorage'
DBBACKUP_STORAGE_OPTIONS = {'location': os.path.join(BASE_DIR, 'backup')}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
    {
        'NAME': 'registration.validators.MerevaValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

DATE_INPUT_FORMATS = ['%Y-%m-%d','%d/%m/%Y', ]

# Lists of languages site supports.
LANGUAGES = (
    ('en', _('English')),
    ('fr', _('French')),
)

LOCALE_PATHS = [
    os.path.join(BASE_DIR,'locale'),
]


LOGIN_URL = 'home'
LOGIN_REDIRECT_URL = 'home'
LOGOUT_REDIRECT_URL = 'home'

# sendgrid
EMAIL_HOST = 'smtp.sendgrid.net'
EMAIL_PORT = 587
EMAIL_HOST_USER = 'apikey'
EMAIL_HOST_PASSWORD = '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'
EMAIL_USE_TLS = True

# paramètres utilisés pour middleware personalisé AutoLogout en cours d'écriture
TIME = 15*60  # 15 minutes : 15*60 or your time in seconds
SESSION_SERIALIZER = 'django.contrib.sessions.serializers.PickleSerializer'
SESSION_COOKIE_AGE = TIME    # change expired session
SESSION_IDLE_TIMEOUT = TIME  # logout

SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_SAVE_EVERY_REQUEST = True

# # https://github.com/fabiocaccamo/django-maintenance-mode
# # if True the maintenance-mode will be activated
# MAINTENANCE_MODE = None

# # if True admin site will not be affected by the maintenance-mode page
# MAINTENANCE_MODE_IGNORE_ADMIN_SITE = True

CRSF_COOKIE_SECURE = int(os.environ.get("CRSF_COOKIE_SECURE", default=0))
CRSF_TRUSTED_ORIGINS = os.environ.get('CRSF_TRUSTED_ORIGINS', "").split(" ")
BASE_URL = os.environ.get('CRSF_TRUSTED_ORIGINS', "")

FIXTURE_DIRS = [
    os.path.join(BASE_DIR, 'core/fixtures'),
]

IMPORT_DIR = os.path.join(BASE_DIR, 'import/')

BACKUP_DIR = os.path.join(BASE_DIR, 'backup/')

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
}

CELERY_BROKER_URL = 'redis://redis:6379'
CELERY_RESULT_BACKEND = 'redis://redis:6379'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_BEAT_SCHEDULE = {

    'daily_backup': {
        'task': 'cafe.tasks.daily_backup',
        'schedule': crontab(minute='*/2'),# every 2 minute
        # 'schedule': crontab(minute=0, hour=10), # Execute daily at midnight.
        # 'schedule': crontab() # every minute
    },

}